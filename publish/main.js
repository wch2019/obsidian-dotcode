/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => DotCodeArticle
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  // api地址
  publishUrl: "https://www.dotcode.top/api",
  fileUrl: "/document/upload/",
  // 用户名
  username: "",
  // 密码
  password: "",
  // token
  sessionToken: "",
  // 用户信息
  userInfo: {
    avatar: "",
    username: "",
    articleCount: "",
    tagsCount: "",
    categoryCount: ""
  },
  checkArticle: {
    id: "",
    title: "",
    createdTime: "",
    updatedTime: "",
    isPush: 0
  },
  showArticle: false
};
var DotCodeArticle = class extends import_obsidian.Plugin {
  async onload() {
    await this.loadSettings();
    (0, import_obsidian.addIcon)("dotcodeIcon", `<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="100px" height="100px" viewBox="0 0 100 100" version="1.1"><g id="surface1"><path style=" stroke:none;fill-rule:nonzero;fill:rgb(87,96,106);fill-opacity:1;" d="M 47.789062 0 C 57.515625 -1.785156 68.773438 1.839844 76.992188 7.078125 C 88.449219 15.226562 96.84375 25.457031 99.683594 39.53125 C 101.28125 49.894531 100.492188 60.210938 96.460938 69.910156 C 96.011719 71.0625 96.011719 71.0625 95.550781 72.238281 C 89.710938 85.515625 78.214844 93 65.246094 98.277344 C 52.992188 102.527344 38.992188 100.542969 27.472656 95.261719 C 15.035156 88.914062 6.5 78.632812 1.769531 65.488281 C -1.867188 53.164062 -1.375 39.25 4.761719 27.8125 C 5.765625 26.171875 6.855469 24.582031 7.964844 23.007812 C 9.425781 23.300781 10.886719 23.59375 12.390625 23.894531 C 13.640625 27.941406 12.796875 30.234375 11.171875 34.070312 C 6.382812 45.527344 6.964844 56.59375 11.503906 68.140625 C 17.214844 79.683594 26.269531 86.742188 38.328125 90.984375 C 48.921875 93.785156 60.726562 92.4375 70.464844 87.5 C 80.671875 81.265625 87.765625 72.742188 91.09375 61.171875 C 93.78125 48.296875 91.902344 36.089844 84.664062 25.019531 C 77.34375 15.0625 67.566406 10.042969 55.53125 8.074219 C 54.253906 7.890625 52.976562 7.707031 51.699219 7.527344 C 48.671875 7.078125 48.671875 7.078125 46.902344 6.195312 C 46.238281 4.535156 46.238281 4.535156 46.019531 2.65625 C 46.601562 1.777344 47.1875 0.902344 47.789062 0 Z M 47.789062 0 "/><path style=" stroke:none;fill-rule:nonzero;fill:rgb(87,96,106);fill-opacity:1;" d="M 71.273438 21.910156 C 79.183594 28.445312 83.628906 36.742188 84.957031 46.902344 C 85.351562 56.804688 82.726562 65.660156 76.382812 73.339844 C 69.167969 80.855469 60.769531 84.238281 50.519531 84.921875 C 41.691406 85.03125 34.449219 81.753906 27.269531 76.824219 C 19.597656 69.15625 16.097656 61.410156 14.796875 50.8125 C 15.042969 48.671875 15.042969 48.671875 16.8125 47.058594 C 17.394531 46.714844 17.980469 46.371094 18.585938 46.019531 C 22.011719 47.675781 22.011719 47.675781 23.007812 48.671875 C 23.25 50.125 23.46875 51.582031 23.671875 53.042969 C 24.96875 60.332031 27.585938 66.890625 33.636719 71.460938 C 40.988281 76.074219 48.019531 77.085938 56.636719 76.105469 C 63.449219 74.386719 69.183594 70.054688 73.105469 64.273438 C 76.949219 57.011719 77.492188 48.953125 75.519531 40.996094 C 72.722656 33.957031 67.789062 28.472656 60.882812 25.390625 C 53.457031 22.535156 45.230469 23.09375 37.914062 26.015625 C 35.6875 26.742188 34.039062 26.4375 31.859375 25.664062 C 31.566406 24.203125 31.273438 22.742188 30.972656 21.238281 C 42.648438 11.832031 59.488281 13.75 71.273438 21.910156 Z M 71.273438 21.910156 "/><path style=" stroke:none;fill-rule:nonzero;fill:rgb(87,96,106);fill-opacity:1;" d="M 58.683594 32.355469 C 63.761719 35.296875 67.195312 39.578125 69.027344 45.132812 C 69.828125 51.382812 69.320312 56.824219 65.488281 61.945312 C 61.773438 65.898438 58.015625 68.675781 52.492188 69.292969 C 45.210938 69.324219 40.898438 67.738281 35.398438 62.832031 C 33.738281 61.0625 33.738281 61.0625 32.742188 59.292969 C 32.976562 56.632812 33.480469 55.898438 35.398438 53.980469 C 38.367188 54.269531 39.726562 55.4375 41.757812 57.523438 C 45.292969 60.675781 48.429688 61.28125 53.097656 61.0625 C 56.105469 60.675781 56.105469 60.675781 58.40625 59.292969 C 59.636719 57.144531 59.636719 57.144531 60.175781 54.867188 C 60.46875 54.28125 60.761719 53.699219 61.0625 53.097656 C 61.417969 48.488281 61.035156 45.445312 58.40625 41.59375 C 54.578125 38.984375 51.488281 38.363281 46.902344 38.9375 C 44.082031 40.425781 44.082031 40.425781 41.59375 42.476562 C 40.332031 43.464844 40.332031 43.464844 39.046875 44.46875 C 38.429688 44.980469 37.808594 45.492188 37.167969 46.019531 C 35.453125 45.355469 35.453125 45.355469 33.628906 44.246094 C 32.9375 42.601562 32.9375 42.601562 32.742188 40.707031 C 34.941406 36.515625 38.851562 33.445312 43.125 31.558594 C 48.335938 30.042969 53.699219 30.152344 58.683594 32.355469 Z M 58.683594 32.355469 "/></g></svg>`);
    const ribbonIconEl = this.addRibbonIcon("dotcodeIcon", "\u53D1\u5E03", (evt) => {
      this.getUserInfo();
      if (this.settings.showArticle) {
        new ArticleModel(this.app, this).open();
      }
    });
    ribbonIconEl.addClass("my-plugin-ribbon-class");
    this.addCommand({
      id: "\u53D1\u5E03\u5F53\u524D\u7B14\u8BB0",
      name: "\u53D1\u5E03\u5F53\u524D\u7B14\u8BB0",
      callback: () => {
        this.getUserInfo();
        if (this.settings.showArticle) {
          new ArticleModel(this.app, this).open();
        }
      }
    });
    this.addCommand({
      id: "sample-editor-command",
      name: "Sample editor command",
      editorCallback: (editor, view) => {
        console.log(editor.getSelection());
        editor.replaceSelection("Sample Editor Command");
      }
    });
    this.addCommand({
      id: "open-sample-modal-complex",
      name: "Open sample modal (complex)",
      checkCallback: (checking) => {
        const markdownView = this.app.workspace.getActiveViewOfType(import_obsidian.MarkdownView);
        if (markdownView) {
          if (!checking) {
            new SampleModal(this.app).open();
          }
          return true;
        }
      }
    });
    this.addSettingTab(new SampleSettingTab(this.app, this));
    this.registerDomEvent(document, "click", (evt) => {
      console.log("click", evt);
    });
    this.registerInterval(window.setInterval(() => console.log("setInterval"), 5 * 60 * 1e3));
  }
  onunload() {
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  // 尝试登录
  async attemptLogin() {
    try {
      const response = await fetch(this.settings.publishUrl + "/login", {
        method: "POST",
        headers: {
          "Content-Type": "application/json"
        },
        body: JSON.stringify({
          username: this.settings.username,
          password: this.settings.password,
          rememberMe: false
        })
      });
      const result = await response.json();
      if (result.code === 200) {
        this.settings.sessionToken = result.data;
        await this.saveSettings();
        new import_obsidian.Notice(result.msg);
      } else {
        new import_obsidian.Notice(result.msg || "\u767B\u5F55\u5931\u8D25");
      }
    } catch (error) {
      console.error("Login error:", error);
      new import_obsidian.Notice("\u8BF7\u6C42\u5931\u8D25\uFF0C\u8BF7\u68C0\u67E5\u4FE1\u606F\u662F\u5426\u6B63\u786E");
    }
  }
  // 获取用户信息
  async getUserInfo(retry = true) {
    try {
      const response = await fetch(this.settings.publishUrl + "/system/user/article/info", {
        method: "GET",
        headers: {
          "Authorization": this.settings.sessionToken,
          "Content-Type": "application/json"
        }
      });
      const result = await response.json();
      if (result.code === 401 && retry) {
        await this.attemptLogin();
        return this.getUserInfo(false);
      }
      if (result.code === 200) {
        this.settings.userInfo = result.data;
        await this.saveSettings();
        this.settings.showArticle = true;
      } else {
        this.settings.showArticle = false;
        new import_obsidian.Notice(result.msg || "\u83B7\u53D6\u7528\u6237\u4FE1\u606F\u5931\u8D25");
      }
    } catch (error) {
      this.settings.showArticle = false;
      console.error("UserInfo error:", error);
      new import_obsidian.Notice("\u83B7\u53D6\u7528\u6237\u4FE1\u606F\u5931\u8D25\uFF0C\u8BF7\u68C0\u67E5\u4FE1\u606F\u662F\u5426\u6B63\u786E");
    }
  }
  // 检查文章是否存在
  async checkArticleExistence(title, date) {
    try {
      const response = await fetch(this.settings.publishUrl + `/note/article/exist/state?title=${title}&date=${date}`, {
        method: "GET",
        headers: {
          "Authorization": this.settings.sessionToken,
          "Content-Type": "application/x-www-form-urlencoded"
        }
      });
      const result = await response.json();
      if (result.code === 200) {
        console.log("Article existence check result:", result);
        this.settings.checkArticle = result.data;
        this.settings.showArticle = true;
      } else {
        this.settings.showArticle = false;
        new import_obsidian.Notice(result.msg || "\u83B7\u53D6\u6587\u7AE0\u5B58\u5728\u72B6\u6001\u5931\u8D25");
      }
    } catch (error) {
      this.settings.showArticle = false;
      console.error("checkArticleExistence error:", error);
      new import_obsidian.Notice("\u83B7\u53D6\u6587\u7AE0\u5B58\u5728\u72B6\u6001\u5931\u8D25\uFF0C\u8BF7\u68C0\u67E5\u4FE1\u606F\u662F\u5426\u6B63\u786E");
    }
  }
  // 上传文件
  async uploadFile(file) {
    const fileContent = await this.app.vault.readBinary(file);
    const fileExtension = file.extension.toLowerCase();
    let mimeType = "";
    switch (fileExtension) {
      case "png":
        mimeType = "images/png";
        break;
      case "jpg":
      case "jpeg":
        mimeType = "images/jpeg";
        break;
      case "gif":
        mimeType = "images/gif";
        break;
      case "bmp":
        mimeType = "images/bmp";
        break;
      case "webp":
        mimeType = "images/webp";
        break;
      default:
        throw new Error(`\u4E0D\u652F\u6301\u7684\u56FE\u7247\u683C\u5F0F: ${fileExtension}`);
    }
    const blob = new Blob([fileContent], { type: mimeType });
    const newFile = new File([blob], file.name, { type: mimeType });
    const formData = new FormData();
    formData.append("file", newFile);
    const response = await fetch(this.settings.publishUrl + "/file/image", {
      method: "POST",
      headers: {
        "Authorization": this.settings.sessionToken
      },
      body: formData
    });
    if (!response.ok) {
      throw new Error(`\u4E0A\u4F20\u5931\u8D25: ${response.statusText}`);
    }
    const result = await response.json();
    if (result.code != "200") {
      return null;
    }
    console.log("\u8F93\u51FA\u7684\u6570\u636E", result.data);
    return result.data;
  }
  //上传文章
  async uploadArticle(article, checkArticle) {
    try {
      const response = await fetch(this.settings.publishUrl + "/note/article/local/upload", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          "Authorization": this.settings.sessionToken
        },
        body: JSON.stringify({
          "title": article.title,
          "categories": article.categories,
          "tags": article.tags,
          "original": article.original,
          "date": article.date,
          "updated": article.updated,
          "cover": article.cover,
          "content": article.content,
          "summary": article.summary,
          "isPush": article.isPush,
          "id": checkArticle.id
        })
      });
      const result = await response.json();
      if (result.code === 200) {
        console.log("uploadArticle:", result);
        new import_obsidian.Notice(result.msg);
      } else {
        new import_obsidian.Notice(result.msg || "\u4E0A\u4F20\u6587\u7AE0\u5931\u8D25");
      }
    } catch (error) {
      this.settings.showArticle = false;
      console.error("checkArticleExistence error:", error);
      new import_obsidian.Notice("\u4E0A\u4F20\u6587\u7AE0\u5931\u8D25\uFF0C\u8BF7\u68C0\u67E5\u4FE1\u606F\u662F\u5426\u6B63\u786E");
    }
  }
};
var SampleModal = class extends import_obsidian.Modal {
  constructor(app) {
    super(app);
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.setText("Woah!");
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};
var SampleSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h1", { text: "DotCode" });
    new import_obsidian.Setting(containerEl).setName("DotCode\u5730\u5740").setDesc("\u8F93\u5165\u5B8C\u6574\u5730\u5740\u8DEF\u5F84\uFF0C\u4F8B\u5982: https://www.dotcode.top/api").addText((text) => {
      text.setPlaceholder("\u8F93\u5165\u540E\u53F0url");
      text.setValue(this.plugin.settings.publishUrl);
      text.inputEl.addEventListener("blur", async () => {
        this.plugin.settings.publishUrl = text.getValue();
        await this.getIndex();
        await this.plugin.saveSettings();
      });
      text.inputEl.style.width = "300px";
    });
    new import_obsidian.Setting(containerEl).setName("\u7528\u6237\u540D").setDesc("\u8BF7\u8F93\u5165\u7528\u6237\u540D/\u90AE\u7BB1").addText((text) => {
      text.setPlaceholder("\u8F93\u5165\u7528\u6237\u540D/\u90AE\u7BB1");
      text.setValue(this.plugin.settings.username);
      text.onChange(async (value) => {
        this.plugin.settings.username = value;
        await this.plugin.saveSettings();
      });
      text.inputEl.style.width = "300px";
    });
    new import_obsidian.Setting(containerEl).setName("\u5BC6\u7801").setDesc("\u8F93\u5165\u60A8\u7684\u5BC6\u7801").addText((text) => {
      text.setPlaceholder("\u8F93\u5165\u5BC6\u7801");
      text.setValue(this.plugin.settings.password);
      text.inputEl.type = "password";
      text.onChange(async (value) => {
        this.plugin.settings.password = value;
        await this.plugin.saveSettings();
      });
      text.inputEl.style.width = "300px";
    });
  }
  // 获取版本
  async getIndex() {
    try {
      const response = await fetch(this.plugin.settings.publishUrl + "/index", {
        method: "GET",
        headers: {
          "Content-Type": "application/x-www-form-urlencoded"
        }
      });
      const responseText = await response.text();
      console.log("Response Text:", responseText);
      new import_obsidian.Notice("\u8BF7\u6C42\u6210\u529F");
    } catch (error) {
      console.error("Index error:", error);
      new import_obsidian.Notice("\u8BF7\u6C42\u5931\u8D25\uFF0C\u8BF7\u68C0\u67E5\u4FE1\u606F\u662F\u5426\u6B63\u786E");
    }
  }
};
var ArticleModel = class extends import_obsidian.Modal {
  constructor(app, plugin) {
    super(app);
    this.plugin = plugin;
    this.article = {
      title: "",
      categories: "",
      tags: [],
      original: "",
      date: "",
      updated: "",
      cover: "",
      content: "",
      summary: "",
      isPush: 0
    };
  }
  async onOpen() {
    const { contentEl } = this;
    const userInfoContainer = contentEl.createEl("div", { cls: "user-info-container" });
    const avatarImg = userInfoContainer.createEl("img", {
      attr: {
        src: this.plugin.settings.publishUrl + this.plugin.settings.fileUrl + this.plugin.settings.userInfo.avatar,
        alt: "\u7528\u6237\u5934\u50CF"
      }
    });
    const usernameEl = userInfoContainer.createEl("div", {
      text: `${this.plugin.settings.userInfo.username}`,
      cls: "user-info-name"
    });
    const articleCountEl = userInfoContainer.createEl("div", {
      text: `\u6587\u7AE0: ${this.plugin.settings.userInfo.articleCount}`,
      cls: "user-info-item"
    });
    const categoryCountEl = userInfoContainer.createEl("div", {
      text: `\u5206\u7C7B: ${this.plugin.settings.userInfo.categoryCount}`,
      cls: "user-info-item"
    });
    const tagsCountEl = userInfoContainer.createEl("div", {
      text: `\u6807\u7B7E: ${this.plugin.settings.userInfo.tagsCount}`,
      cls: "user-info-item"
    });
    const currentFile = this.app.workspace.getActiveFile();
    if (currentFile != null && currentFile.extension.endsWith("md")) {
      const file = currentFile;
      console.log("\u5F53\u524D\u6FC0\u6D3B\u7684\u6587\u4EF6", file);
      const fileName = file.name;
      const fileContent = await this.app.vault.read(file);
      const createdTime = file.stat.ctime;
      const modifiedTime = file.stat.mtime;
      const yamlContent = this.extractFrontMatter(fileContent);
      if (yamlContent) {
        try {
          this.article = (0, import_obsidian.parseYaml)(yamlContent);
        } catch (e) {
          new import_obsidian.Notice(`Failed to parse YAML: ${e.message}`);
        }
      }
      const content = fileContent.replace(/^---[\s\S]*?---\n*/, "");
      if (this.article.title == "" || this.article.title == void 0) {
        this.article.title = fileName.replace(/\.md$/, "");
      }
      this.article.content = content;
      this.article.summary = this.removeMarkdownTags(content).substring(0, 100);
      if (this.article.date == "" || this.article.date == void 0) {
        this.article.date = this.formatTimestampToDateTime(createdTime);
      }
      this.article.updated = this.formatTimestampToDateTime(modifiedTime);
      this.showEditModal(this.article);
      await this.plugin.checkArticleExistence(this.article.title, this.article.date);
    } else {
      this.close();
      new import_obsidian.Notice(`\u6CA1\u6709\u6D3B\u52A8\u7684Markdown\u7B14\u8BB0`);
    }
    const rowEl = contentEl.createDiv({ cls: "settings-row" });
    if (this.plugin.settings.checkArticle.id) {
      rowEl.createDiv({
        cls: `status-display status-normal`
      });
      rowEl.createDiv({
        text: `\u6700\u8FD1\u540C\u6B65: ${this.plugin.settings.checkArticle.updatedTime}`,
        cls: "time-display"
      });
    } else {
      rowEl.createDiv({
        cls: `status-display status-default`
      });
    }
    this.article.isPush = this.plugin.settings.checkArticle.isPush == null ? 0 : this.plugin.settings.checkArticle.isPush;
    new import_obsidian.Setting(rowEl).addDropdown(
      (dropdown) => dropdown.addOption("0", "\u8349\u7A3F").addOption("1", "\u53D1\u5E03").setValue(String(this.article.isPush)).onChange(async (value) => {
        const numberValue = Number(value);
        this.plugin.settings.checkArticle.isPush = numberValue;
        this.article.isPush = numberValue;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian.Setting(rowEl).addButton((button) => {
      button.setButtonText("\u63D0\u4EA4").setCta().onClick(async () => {
        await this.uploadArticle(this.article, this.plugin.settings.checkArticle);
        this.close();
      });
    });
  }
  // 提取 YAML Front Matter
  extractFrontMatter(content) {
    const match = content.match(/^---\n([\s\S]*?)\n---/);
    return match ? match[1] : null;
  }
  // 移除 Markdown 标签
  removeMarkdownTags(content) {
    return content.replace(/!\[.*?\]\(.*?\)/g, "").replace(/\[.*?\]\(.*?\)/g, "").replace(/`{1,3}[\s\S]*?`{1,3}/g, "").replace(/```[\s\S]*?```/g, "").replace(/^\s*#.*$/gm, "").replace(/^\s*>/gm, "").replace(/[*_~`]/g, "").replace(/-{3,}/g, "").replace(/^\s*-\s*/gm, "").replace(/^\d+\.\s*/gm, "").replace(/\n{2,}/g, "\n").trim();
  }
  // 格式化时间戳为日期和时间
  formatTimestampToDateTime(timestamp) {
    const date = new Date(timestamp);
    const [day, month, year] = date.toLocaleDateString("en-GB").split("/");
    const time = date.toLocaleTimeString("en-GB", { hour12: false });
    return `${year}-${month}-${day} ${time}`;
  }
  // 显示当前文章信息
  showEditModal(data) {
    const { contentEl } = this;
    contentEl.createEl("hr", { cls: "hr" });
    const form = contentEl.createEl("form", { cls: "yaml-form" });
    const fields = [
      { label: "\u6807\u9898", key: "title", type: "text" },
      { label: "\u5206\u7C7B", key: "categories", type: "text" },
      { label: "\u6807\u7B7E", key: "tags", type: "text" },
      { label: "\u5C01\u9762", key: "cover", type: "text" },
      { label: "\u8F6C\u8F7D", key: "original", type: "text" },
      { label: "\u63CF\u8FF0", key: "summary", type: "text" },
      { label: "\u521B\u5EFA\u65F6\u95F4", key: "date", type: "text" },
      { label: "\u66F4\u65B0\u65F6\u95F4", key: "updated", type: "text" }
    ];
    fields.forEach((field) => {
      const container = form.createEl("div", { cls: "form-group" });
      container.createEl("label", { text: field.label, cls: "form-label" });
      const input = container.createEl("input", { cls: "form-input" });
      input.type = field.type;
      input.value = data[field.key] || "";
      input.dataset.key = field.key;
      input.disabled = true;
    });
  }
  // 移除路径前缀 '../'
  removePrefixFromPath(filePath) {
    return filePath.replace(/^(\.\.\/)+/, "");
  }
  // 上传文章
  async uploadArticle(article, checkArticle) {
    if (article.cover) {
      const file = this.app.vault.getFileByPath(this.removePrefixFromPath(article.cover));
      if (file != null) {
        article.cover = await this.plugin.uploadFile(file);
      }
    }
    article.content = await this.uploadImagesAndReplacePaths(article.content);
    console.log("settings", this.plugin.settings);
    console.log("article", article);
    console.log("checkArticle", checkArticle);
    await this.plugin.uploadArticle(article, checkArticle);
  }
  // 上传图片
  async uploadImagesAndReplacePaths(markdownContent) {
    const imageRegex = /!\[.*?\]\((?!http)(.*?)\)/g;
    let newMarkdownContent = markdownContent;
    const imageMatches = [...markdownContent.matchAll(imageRegex)];
    for (const match of imageMatches) {
      const imagePath = match[1];
      console.log("imagePath", imagePath);
      const tfile = this.app.vault.getAbstractFileByPath(this.removePrefixFromPath(imagePath));
      if (tfile && tfile instanceof import_obsidian.TFile) {
        try {
          const newImageUrl = await this.plugin.uploadFile(tfile);
          if (newImageUrl) {
            const oldImageMarkdown = match[0];
            const newImageMarkdown = `![${tfile.basename}](..${newImageUrl})`;
            newMarkdownContent = newMarkdownContent.replace(oldImageMarkdown, newImageMarkdown);
          }
        } catch (error) {
          console.error(`Error uploading file: ${tfile.name}`, error);
        }
      } else {
        console.error(`File not found for path: ${imagePath}`);
      }
    }
    return newMarkdownContent;
  }
};
//# sourceMappingURL=data:application/json;base64,
